import glob,logging,os
from typing import List,Optional
import yaml
from localstack.utils.files import load_file
from localstack_ext.bootstrap.pods.constants import STATE_ZIP,VERSION_FILE,VERSIONS_ARCHIVE
from localstack_ext.bootstrap.pods.models import PodObject,Version
from localstack_ext.bootstrap.pods.utils.common import PodsConfigContext
from localstack_ext.bootstrap.pods.utils.serializers import PodsSerializerYaml
LOG=logging.getLogger(__name__)
class ObjectStorageProvider:
	config_context:PodsConfigContext;serializer:PodsSerializerYaml
	def __init__(A,config_context):A.config_context=config_context;A.serializer=PodsSerializerYaml()
	@property
	def version_store_path(self):return self.config_context.pod_root_dir
	@property
	def object_store_path(self):return self.config_context.get_obj_store_path()
	def get_state_file_location_by_key(A,key):return os.path.join(A.object_store_path,key)
	def upsert_objects(A,*B):return A._serialize(*B)
	def get_in_progress_version(B):
		A=B._version_file_path()
		if not os.path.exists(A):raise Exception('No version.yaml file found')
		C=yaml.safe_load(load_file(A));return Version.from_dict(C)
	def _version_file_path(A):return os.path.join(A.version_store_path,VERSION_FILE)
	def get_available_versions(B):
		A=glob.glob(os.path.join(B.config_context.pod_root_dir,f"{STATE_ZIP}*"))
		if not A:A=glob.glob(os.path.join(B.config_context.pod_root_dir,f"{VERSIONS_ARCHIVE}-*.zip"))
		return sorted([int(os.path.basename(A).split('-')[-1].replace('.zip',''))for A in A])
	def _serialize(B,*D):
		C=[]
		for A in D:
			if isinstance(A,Version):E=B.serializer.store_version(A,B.version_store_path);C.append(E)
			else:raise Exception(f"Unexpected pod object passed for serialization: {A}")
		return C