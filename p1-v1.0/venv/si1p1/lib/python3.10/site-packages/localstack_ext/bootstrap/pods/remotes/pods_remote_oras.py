_B='oras'
_A=None
import glob,logging,os,re,shutil,tempfile,typing
from typing import Dict,List,Optional,Tuple
from urllib.parse import urlparse
from localstack import config
from localstack.constants import LOCALHOST
from localstack.utils.files import mkdir,rm_rf
from localstack.utils.numbers import is_number
from localstack.utils.run import run
from localstack.utils.strings import short_uid
from requests import Response
from localstack_ext.bootstrap.pods.remote import CloudPodsRemote
if typing.TYPE_CHECKING:from dxf import DXF;from oras.client import OrasClient
LOG=logging.getLogger(__name__)
class CloudPodsRemoteOras(CloudPodsRemote):
	name=_B;protocols={_B}
	def _install_dependencies(B):
		try:from dxf import DXF,DXFBase;from oras.client import OrasClient
		except ImportError:
			A=['pip','install',_B,'python-dxf']
			if config.is_in_docker:run(A)
			else:raise Exception("Please install oras and python-dxf: '%s'"%' '.join(A))
	def list_pods(A):
		D=A._registry_client();E=D.list_repos();B=[]
		for C in E:F=A.get_max_version(C);B.append({'pod_name':C,'max_version':F})
		return B
	def is_registered(A,pod_name):return True
	def get_max_version(B,pod_name):
		C=pod_name;E,G=B._client()
		try:
			F=B._get_target(C);A=E.get_tags(F);A=[A.split('-')[-1]for A in A if A.startswith('state-')];A=[int(A)for A in A if is_number(A)]
			if A:return sorted(A)[-1]
		except Exception as D:
			if'Not Found'not in str(D):LOG.info("Unable to get max version for cloud pod '%s': %s",C,D)
		return 0
	def register_remote(A,pod_name,details=_A):return True
	def push_pod(A,pod_name,version,overwrite=False,details=_A):
		E=pod_name;B=version;G,M=A._client();H=A.pods_fs_ops.config_context.get_pod_state_archive_path(B);I=A.pods_fs_ops.config_context.get_pod_version_archive_path(B);J={f"{E}:state-{B}":H,f"{E}:version-{B}":I};D=f"tmp-cloud-pod-{short_uid()}";mkdir(D)
		try:
			for(C,K)in J.items():F=os.path.join(D,f"{C.replace(':','-')}.zip");shutil.copyfile(K,F);L={};C=A._get_target(C);G.push(files=[F],target=C,manifest_annotations=L)
		finally:rm_rf(D)
	def pull_version(B,pod_name,version):
		D=pod_name;A=version
		if A==0:return
		F,M=B._client();H={}
		with tempfile.TemporaryDirectory()as C:
			try:E=B._get_target(f"{D}:state-{A}");F.pull(outdir=C,target=E);G=glob.glob(os.path.join(C,f"*state-{A}.zip"))[0];H[A]=G;I=B.pods_fs_ops.config_context.get_pod_state_archive_path(version=A);shutil.copyfile(G,I)
			except Exception as J:LOG.debug('Unable to pull version %s for cloud pod %s: %s',A,D,J)
			E=B._get_target(f"{D}:version-{A}");F.pull(outdir=C,target=E);K=glob.glob(os.path.join(C,f"*version-{A}.zip"))[0];L=B.pods_fs_ops.config_context.get_pod_version_archive_path(A);shutil.copyfile(K,L)
	def get_remote_params(E):
		D='oras_password';C='oras_username';A=os.getenv('ORAS_USERNAME')or os.getenv(C);B=os.getenv('ORAS_PASSWORD')or os.getenv(D)
		if not A or not B:raise Exception('Please specify ORAS_USERNAME and ORAS_PASSWORD in the environment')
		return{C:A,D:B}
	def _client(A):
		A._install_dependencies();from oras.client import OrasClient as D;E=A.remote_config.remote_url;B=urlparse(E);I=re.sub('^oras://','',E);F=B.netloc.startswith(LOCALHOST);G,H=A._get_basic_auth()
		if G and H:J=B.netloc.split('@')[-1];C=D(hostname=J,insecure=F);C.set_basic_auth(G,H)
		else:C=D(hostname=B.netloc,insecure=F)
		return C,I
	def _registry_client(A):
		A._install_dependencies();from dxf import DXF,DXFBase;B=A.remote_config.remote_url;B=B.replace('oras://','http://');H=urlparse(B);D=H.netloc;E,F=A._get_basic_auth()
		def I(base,response):base.authenticate(E,F,response=response)
		C=_A
		if E and F:C=I
		try:G=DXF(D,repo='',auth=C);G.api_version_check();return G
		except Exception as J:
			if'SSLError'in str(J):return DXF(D,repo='',insecure=True,auth=C)
			raise
	def _get_basic_auth(B):
		C=B.remote_config.remote_url;A=urlparse(C)
		if'@'not in A.netloc:return _A,_A
		D,E,H=A.netloc.partition('@');F,E,G=D.partition(':');return F,G
	def _get_target(C,relative_target):
		A=relative_target;D=C.remote_config.remote_url;E=urlparse(D);B=E.path.strip('/')
		if B:return f"{B}/{A}"
		return A