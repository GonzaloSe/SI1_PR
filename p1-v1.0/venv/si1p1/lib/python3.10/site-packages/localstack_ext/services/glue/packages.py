_B='2.4.3'
_A='2.0'
import logging,os
from localstack.constants import MAVEN_REPO_URL
from localstack.utils.files import cp_r,mkdir
from localstack.utils.http import download
from localstack_ext import config as ext_config
from localstack_ext.constants import S3_ASSETS_BUCKET_URL
LOG=logging.getLogger(__name__)
DEFAULT_GLUE_VERSION=os.getenv('GLUE_DEFAULT_VERSION','').strip()or _A
SPARK_HOME_LEGACY='/usr/local/spark-{spark_version}{suffix}'
GLUE_TO_SPARK_VERSIONS={'0.9':'2.2.1','1.0':_B,_A:_B,'3.0':'3.1.1','4.0':'3.3.0'}
GLUE_JARS_BASE_URL='https://aws-glue-etl-artifacts.s3.amazonaws.com/release/com/amazonaws'
GLUE_JARS={'all':[f"{GLUE_JARS_BASE_URL}/AWSGlueETL/<version>/AWSGlueETL-<version>.jar",f"{GLUE_JARS_BASE_URL}/AWSGlueDynamicSchemaHiveFormat/1.0.0/AWSGlueDynamicSchemaHiveFormat-1.0.0.jar",f"{GLUE_JARS_BASE_URL}/AWSGlueSimd4j/1.0.0/AWSGlueSimd4j-1.0.0.jar",f"{GLUE_JARS_BASE_URL}/AWSGlueDynamicSchema/0.9.0/AWSGlueDynamicSchema-0.9.0.jar",f"{GLUE_JARS_BASE_URL}/AWSGlueGrokFork/0.9.0/AWSGlueGrokFork-0.9.0.jar",f"{GLUE_JARS_BASE_URL}/AWSGlueJdbcCommons/0.9.0/AWSGlueJdbcCommons-0.9.0.jar",f"{S3_ASSETS_BUCKET_URL}/NimbleParquet-1.0.jar",f"{S3_ASSETS_BUCKET_URL}/AWSGlueLineageCommons-1.0.jar",f"{MAVEN_REPO_URL}/org/apache/commons/commons-collections4/4.4/commons-collections4-4.4.jar",f"{MAVEN_REPO_URL}/it/unimi/dsi/fastutil/8.4.4/fastutil-8.4.4.jar",f"{MAVEN_REPO_URL}/com/fasterxml/jackson/dataformat/jackson-dataformat-xml/2.12.6/jackson-dataformat-xml-2.12.6.jar"],'0.9':[f"{GLUE_JARS_BASE_URL}/AWSGlueReaders/<version>/AWSGlueReaders-<version>.jar",f"{MAVEN_REPO_URL}/joda-time/joda-time/2.9.3/joda-time-2.9.3.jar",f"{MAVEN_REPO_URL}/mysql/mysql-connector-java/5.1.49/mysql-connector-java-5.1.49.jar"],'1.0':[f"{GLUE_JARS_BASE_URL}/AWSGlueReaders/<version>/AWSGlueReaders-<version>.jar",f"{S3_ASSETS_BUCKET_URL}/AWSGlueDataplane-1.0-Scala2.11.jar",f"{MAVEN_REPO_URL}/mysql/mysql-connector-java/5.1.49/mysql-connector-java-5.1.49.jar"],_A:[f"{GLUE_JARS_BASE_URL}/AWSGlueReaders/<version>/AWSGlueReaders-<version>.jar",f"{S3_ASSETS_BUCKET_URL}/AWSGlueDataplane-1.0-Scala2.11.jar",f"{MAVEN_REPO_URL}/mysql/mysql-connector-java/5.1.49/mysql-connector-java-5.1.49.jar"],'3.0':[f"{GLUE_JARS_BASE_URL}/AWSGlueReaders/<version>/AWSGlueReaders-<version>.jar",f"{GLUE_JARS_BASE_URL}/AWSGlueArrowVectorShader/1.0/AWSGlueArrowVectorShader-1.0.jar",f"{GLUE_JARS_BASE_URL}/AWSGlueLineageCommons/1.0/AWSGlueLineageCommons-1.0.jar",f"{S3_ASSETS_BUCKET_URL}/AWSGlueDataplane-1.0-Scala2.12.jar",f"{MAVEN_REPO_URL}/joda-time/joda-time/2.9.3/joda-time-2.9.3.jar",f"{MAVEN_REPO_URL}/mysql/mysql-connector-java/8.0.23/mysql-connector-java-8.0.23.jar"],'4.0':[f"{GLUE_JARS_BASE_URL}/AWSGlueArrowVectorShader/1.0/AWSGlueArrowVectorShader-1.0.jar",f"{GLUE_JARS_BASE_URL}/AWSGlueLineageCommons/1.0/AWSGlueLineageCommons-1.0.jar",f"{S3_ASSETS_BUCKET_URL}/AWSGlueDataplane-1.0-Scala2.12.jar",f"{MAVEN_REPO_URL}/joda-time/joda-time/2.10.13/joda-time-2.10.13.jar",f"{MAVEN_REPO_URL}/mysql/mysql-connector-java/8.0.30/mysql-connector-java-8.0.30.jar",f"{MAVEN_REPO_URL}/org/json4s/json4s-core_2.12/3.7.0-M11/json4s-core_2.12-3.7.0-M11.jar",f"{MAVEN_REPO_URL}/org/json4s/json4s-ast_2.12/3.7.0-M11/json4s-ast_2.12-3.7.0-M11.jar",f"{MAVEN_REPO_URL}/org/json4s/json4s-scalap_2.12/3.7.0-M11/json4s-scalap_2.12-3.7.0-M11.jar",f"{MAVEN_REPO_URL}/org/json4s/json4s-jackson_2.12/3.7.0-M11/json4s-jackson_2.12-3.7.0-M11.jar",f"{S3_ASSETS_BUCKET_URL}/AWSGlueReaders-4.0.0.jar"]}
def copy_glue_libs_into_spark(glue_version):
	D=glue_version;from localstack_ext.packages.spark import get_spark_install_cache_dir as H;F=get_spark_for_glue_version(D);I=GLUE_JARS.get('all')+GLUE_JARS.get(D,[]);J=os.path.join(H(F),'jars');K=f"{get_spark_home(F)}/jars";A=f"{D}.0";A='1.0.0'if A=='2.0.0'else A
	for B in I:
		B=B.replace('<version>',A);G=B.rpartition('/')[2];C=os.path.join(J,G)
		if not os.path.exists(C):download(B,C)
		E=f"{K}/{G}"
		if ext_config.BIGDATA_MONO_CONTAINER:copy_file_if_not_exists(C,E)
		else:
			from localstack_ext.utils.bigdata.bigdata_utils import copy_into_spark_container as L,path_exists_in_container as M
			if not M(E):L(C,E)
def get_spark_for_glue_version(glue_version):
	B=glue_version;A=GLUE_TO_SPARK_VERSIONS.get(B)
	if not A:LOG.warning('Unable to find Spark version for Glue version %s',B);A=GLUE_TO_SPARK_VERSIONS[DEFAULT_GLUE_VERSION]
	return A
def get_spark_home(spark_version=None):
	A=spark_version;from localstack_ext.packages.spark import get_spark_install_cache_dir as B;A=A or GLUE_TO_SPARK_VERSIONS[DEFAULT_GLUE_VERSION]
	if ext_config.BIGDATA_MONO_CONTAINER:return B(A)
	C='-bin-without-hadoop'if A==_B else'';return SPARK_HOME_LEGACY.format(spark_version=A,suffix=C)
def copy_file_if_not_exists(local_path,target_path):
	B=local_path;A=target_path
	if os.path.realpath(B)==os.path.realpath(A):return
	mkdir(os.path.dirname(A));cp_r(B,A)