from typing import Optional
import click
from localstack.cli import console
from localstack.utils.analytics.cli import publish_invocation
from localstack_ext.cli.cli import RequiresLicenseGroup
@click.group(name='state',short_help='(Beta) Export, restore, and reset LocalStack state.',help="\n    (Beta) Manage and manipulate the localstack state.\n\n    The state command group allows you to interact with LocalStack's state backend.\n\n    Read more: https://docs.localstack.cloud/references/persistence-mechanism/#snapshot-based-persistence\n    ",cls=RequiresLicenseGroup)
def state():0
@state.command(name='reset',short_help='Reset the state of LocalStack services',help='\n    Reset the service states of the current LocalStack runtime.\n\n    This command invokes a reset of services in the currently running LocalStack container.\n    By default, all services are rest. The `services` options allows to select a subset of services\n    which should be reset.\n\n    This command tries to automatically discover the running LocalStack instance.\n    If LocalStack has not been started with `localstack start` (and is not automatically discoverable),\n    please set `LOCALSTACK_HOSTNAME`, and `EDGE_PORT_HTTP`.\n    ')
@click.option('-s','--services',help='Comma-delimited list of services to reset. By default, the state of all running services is reset.')
@publish_invocation
def reset(services):
	A=services;from localstack_ext.bootstrap import pods_client as B;from localstack_ext.bootstrap.pods.utils.common import is_comma_delimited_list as C
	if A and not C(A):raise click.ClickException('Input the services as a comma-delimited list')
	D=[A.strip()for A in A.split(',')]if A else None;B.reset_state(services=D);console.print('LocalStack state successfully reset')